@startuml
'https://plantuml.com/class-diagram

skinparam linetype ortho
package "entity" {
    abstract User{
        - int userID
        - String firstName
        - String lastName
        - String email
        - int phoneNumber
        - String password
        - List<Order> listOfOrders

        --
        ..Constructor..
        + User(int userID, String firstName, String lastName,
        String email, int phoneNumber,
        String username, String password,
        double balance, String role)

        ..Special Methods..
        + void addOrder(Order order)
        + void removeOrder(Order order)
    }

    class Customer extends User {
    }

    class Salesperson extends User {

        + void addItemToDb(Item item)
    }

    Enum OrderStatus {
        + CUSTOMER_ACCEPTED
        + READY_FOR_REVIEW
        + ORDER_ASSIGNED
        + SALESPERSON_ACCEPTED
        + PRICE_PRESENTED
        + ORDER_PAID
    }

    class Order {
        - int orderID
        - OrderStatus status
        - Carport carport
        - Receipt receipt
        - float price
        ..Getters..
        + ...()
        ..Setters..
        + ...()
    }
    class Receipt {
        - Itemlist itemlist
        - float price
        + float getPrice()
    }
    /'class Receipt'/
    class Carport {
        - int length
        - int width
        - Shed shed
        - Itemlist itemlist
        - Blueprint blueprint
        Carport (int length, int width, boolean trapeztag, Shed shed)

        + List<Materials> getMaterialsOfCarport()
    }

    class Blueprint {
    }

    note "Class used for visualisation" as n1

    class Drawing3D{
    }
    n1 .. Drawing3D
    n1 .. Blueprint

    class Itemlist{
        - List<Item> items
        + List<String> getItemList()
        + float getPrice()
    }

    class Item {
        - int itemID
        - float pricePerUnit
        - String name
        - String description
        - String unit
        - float length
    }
    note left: this is a Record

    class Shed {
        - Itemlist itemlist
    }
}

package "controllers" {

    class UserController {
        + {static} User createUser(Context ctx, ConnectionPool connectionPool)
        + {static} void login(Context ctx, ConnectionPool connectionPool)
        + {static} void logout(Context ctx)
    }

    class OrderController {
        + {static} Order creatOrder(Context ctx, ConnectionPool connectionPool)
        + {static} void editOrder(Context ctx, Order order, ConnectionPool connectionPool)
    }

    class CarportController {
        + {static} Carport createCarport(Context ctx, ConnectionPool connectionPool)
        + {static} Itemlist calculateItems(Carport carport)
    }

    class ItemController {
        + {static} Item addItem(Context ctx, ConnectionPool connectionPool, Item item)
        + {static} Item removeItem(Context ctx, ConnectionPool connectionPool, int itemID)
        + {static} Item editItem(Context ctx, ConnectionPool connectionPool, Item item)
    }
}

package "persistence" {
    class UserMapper {
        + {static} User login(String email, String password, ConnectionPool connectionPool)
        + {static} void createUser(String name, String email, int phoneNumber, String password, ConnectionPool connectionPool)
        + {static} List<Order> getUserOrders(int userId, ConnectionPool connectionPool)
    }

    class OrderMapper {
        + {static} void createOrder(Order order, ConnectionPool connectionPool)
        + {static} List<Order> getAllOpenOrders(ConnectionPool connectionPool)
        + {static} List<Order> getUserOrders(int userID, ConnectionPool connectionPool)
        + {static} List<Order> getAllOrders(ConnectionPool connectionPool)
        + {static} List<Order> getAssignedOrders(int userID, (ConnectionPool connectionPool)
    }

    class ItemMapper {
        + {static} Item addItem(Item item, ConnectionPool connectionPool)
        + {static} Item removeItem(int itemID, ConnectionPool connectionPool)
        + {static} Item editItem(Item item, ConnectionPool connectionPool)
    }
}

/'Relations'/
/'entities'/

Order --o User
OrderStatus --* Order
Carport --* Order
Shed --* Carport
Itemlist --* Shed
Itemlist --* Carport
Item --o Itemlist
Receipt --* Order
Blueprint --* Carport
Drawing3D --* Carport

/'controllers'/
/'
UserController ..> User
OrderController ..> Order
CarportController ..> Carport
ItemController ..> Item
'
persistence ...> controllers
controllers ...>  entity

/'persistence'/
/'
UserMapper <.. UserController
OrderMapper <.. OrderController
ItemMapper <.. ItemController
'/








@enduml